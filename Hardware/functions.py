import numpy as np
import os
import sys
import math
from decimal import Decimal

from aSync import aSync

#crazyswarm_scripts_file_path="/path/to/crazyswarm/scripts"
crazyswarm_scripts_file_path = "/home/adam/Documents/Packages/crazyswarm/ros_ws/src/crazyswarm/scripts"
# append a new directory to sys.path
sys.path.append(crazyswarm_scripts_file_path)
from pycrazyswarm import Crazyswarm
Z=0.5

# Helper
def round_nearest(number, base): ... # Round to the nearest 'base' e.g. nearest 5
def roundup_nearest(number, base): ... # Round UP to the nearest 'base' e.g. nearest 5
def get_coords(position, use_cell_coords=True, input_mode=2): ...
def convert_coords(val, axis): ...
def return_uris(channels,numbers): ...

# Parsing input
def read_cdca_output(filename): ...
def read_default_output(filename): ...
def parse_input(input_path, allcfs, input_mode, speed, next_moves): ...

# Setup
def take_off_all(Z, d, timeHelper,all_drones): ...
def land_all(Z, d, timeHelper,all_drones): ...
def set_initial_positions(timeHelper, all_drones, use_cell_coords,input_mode): ...

class Drone():
    def __init__(self, drone, speed): ...
    def move_next_cell(self, use_cell_coords, travel_time_mode, global_travel_time, i,input_mode, timestep_length): ...
    def calc_travel_time(self, use_cell_coords,input_mode): ...

# Running
def log_all_drones(drone_uris, vars): ...
def follow_plans(timeHelper, all_drones, next_moves, travel_time_mode, use_cell_coords, sensing_time, global_travel_time,input_mode, timestep_length, simulation): ...
def main(simulation, input_mode, input_file_path, travel_time_mode, use_cell_coords, sensing_time, Z, speed, timestep_length=1, global_travel_time=6): ...